{"ast":null,"code":"import { Vue } from '../vue';\nimport { HOOK_EVENT_NAME_BEFORE_DESTROY } from '../constants/events'; // @vue/component\n\nexport var listenOnRootMixin = Vue.extend({\n  methods: {\n    /**\n     * Safely register event listeners on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers a listener on\n     * the component's `beforeDestroy()` hook to automatically remove the\n     * event listener from the `$root` instance\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      var _this = this;\n      this.$root.$on(event, callback);\n      this.$on(HOOK_EVENT_NAME_BEFORE_DESTROY, function () {\n        _this.$root.$off(event, callback);\n      });\n    },\n    /**\n     * Safely register a `$once()` event listener on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n      this.$root.$once(event, callback);\n      this.$on(HOOK_EVENT_NAME_BEFORE_DESTROY, function () {\n        _this2.$root.$off(event, callback);\n      });\n    },\n    /**\n     * Convenience method for calling `vm.$emit()` on `vm.$root`\n     *\n     * @param {string} event\n     * @param {*} args\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      var _this$$root;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args));\n    }\n  }\n});","map":{"version":3,"names":["Vue","HOOK_EVENT_NAME_BEFORE_DESTROY","listenOnRootMixin","extend","methods","listenOnRoot","event","callback","_this","$root","$on","$off","listenOnRootOnce","_this2","$once","emitOnRoot","_this$$root","_len","arguments","length","args","Array","_key","$emit","apply","concat"],"sources":["/mnt/d/D/IIT Madras/SE/Project/code/code/frontend/node_modules/bootstrap-vue/esm/mixins/listen-on-root.js"],"sourcesContent":["import { Vue } from '../vue';\nimport { HOOK_EVENT_NAME_BEFORE_DESTROY } from '../constants/events'; // @vue/component\n\nexport var listenOnRootMixin = Vue.extend({\n  methods: {\n    /**\n     * Safely register event listeners on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers a listener on\n     * the component's `beforeDestroy()` hook to automatically remove the\n     * event listener from the `$root` instance\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      var _this = this;\n\n      this.$root.$on(event, callback);\n      this.$on(HOOK_EVENT_NAME_BEFORE_DESTROY, function () {\n        _this.$root.$off(event, callback);\n      });\n    },\n\n    /**\n     * Safely register a `$once()` event listener on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      this.$root.$once(event, callback);\n      this.$on(HOOK_EVENT_NAME_BEFORE_DESTROY, function () {\n        _this2.$root.$off(event, callback);\n      });\n    },\n\n    /**\n     * Convenience method for calling `vm.$emit()` on `vm.$root`\n     *\n     * @param {string} event\n     * @param {*} args\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      var _this$$root;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args));\n    }\n  }\n});"],"mappings":"AAAA,SAASA,GAAG,QAAQ,QAAQ;AAC5B,SAASC,8BAA8B,QAAQ,qBAAqB,CAAC,CAAC;;AAEtE,OAAO,IAAIC,iBAAiB,GAAGF,GAAG,CAACG,MAAM,CAAC;EACxCC,OAAO,EAAE;IACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,YAAY,EAAE,SAASA,YAAYA,CAACC,KAAK,EAAEC,QAAQ,EAAE;MACnD,IAAIC,KAAK,GAAG,IAAI;MAEhB,IAAI,CAACC,KAAK,CAACC,GAAG,CAACJ,KAAK,EAAEC,QAAQ,CAAC;MAC/B,IAAI,CAACG,GAAG,CAACT,8BAA8B,EAAE,YAAY;QACnDO,KAAK,CAACC,KAAK,CAACE,IAAI,CAACL,KAAK,EAAEC,QAAQ,CAAC;MACnC,CAAC,CAAC;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIK,gBAAgB,EAAE,SAASA,gBAAgBA,CAACN,KAAK,EAAEC,QAAQ,EAAE;MAC3D,IAAIM,MAAM,GAAG,IAAI;MAEjB,IAAI,CAACJ,KAAK,CAACK,KAAK,CAACR,KAAK,EAAEC,QAAQ,CAAC;MACjC,IAAI,CAACG,GAAG,CAACT,8BAA8B,EAAE,YAAY;QACnDY,MAAM,CAACJ,KAAK,CAACE,IAAI,CAACL,KAAK,EAAEC,QAAQ,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;IACIQ,UAAU,EAAE,SAASA,UAAUA,CAACT,KAAK,EAAE;MACrC,IAAIU,WAAW;MAEf,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;QAC1GF,IAAI,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;MAClC;MAEA,CAACN,WAAW,GAAG,IAAI,CAACP,KAAK,EAAEc,KAAK,CAACC,KAAK,CAACR,WAAW,EAAE,CAACV,KAAK,CAAC,CAACmB,MAAM,CAACL,IAAI,CAAC,CAAC;IAC3E;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}