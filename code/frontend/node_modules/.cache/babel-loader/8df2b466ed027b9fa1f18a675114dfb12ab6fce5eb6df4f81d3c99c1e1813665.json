{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport * as common from \"../assets/common.js\";\nexport default {\n  name: \"RegisterView\",\n  components: {},\n  data() {\n    return {\n      role_options: [{\n        text: \"Student\",\n        value: \"student\"\n      }, {\n        text: \"Support\",\n        value: \"support\"\n      }, {\n        text: \"Admin\",\n        value: \"admin\"\n      }],\n      form: {\n        first_name: \"\",\n        last_name: \"\",\n        role: \"student\",\n        email: \"\",\n        password: \"\",\n        retype_password: \"\"\n      },\n      show: true\n    };\n  },\n  methods: {\n    onSubmit(event) {\n      event.preventDefault();\n      alert('You are creating a new account. Click \"Ok\" to proceed?');\n      this.$log.info(\"Submitting Registration form\");\n      this.form.password = btoa(this.form.password);\n      this.form.retype_password = btoa(this.form.retype_password);\n      fetch(common.AUTH_API_REGISTER, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.form)\n      }).then(response => response.json()).then(data => {\n        if (data.category == \"success\") {\n          this.flashMessage.success({\n            message: data.message\n          });\n          this.$router.push(\"/login\");\n        }\n        if (data.category == \"error\") {\n          this.flashMessage.error({\n            message: data.message\n          });\n        }\n      }).catch(error => {\n        this.$log.error(`Error : ${error}`);\n        this.flashMessage.error({\n          message: \"Internal Server Error\"\n        });\n      });\n    },\n    onReset(event) {\n      event.preventDefault();\n      this.form.first_name = \"\";\n      this.form.last_name = \"\";\n      this.form.email = \"\";\n      this.form.password = \"\";\n      this.form.retype_password = \"\";\n      // Trick to reset/clear native browser form validation state\n      this.show = false;\n      this.$nextTick(() => {\n        this.show = true;\n      });\n    }\n  },\n  computed: {\n    check_name() {\n      return this.form.first_name.length > 2 ? true : false;\n    },\n    check_password() {\n      let password = this.form.password;\n      if (password.length < 4 || password.length > 9) {\n        return false;\n      }\n      const valid_char_array = Array.from(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n      const password_array = Array.from(password);\n      for (let i = 0; i < password_array.length; i++) {\n        if (!valid_char_array.includes(password_array[i])) {\n          return false;\n        }\n      }\n      return true;\n    },\n    check_retype_password() {\n      return this.form.password === this.form.retype_password && this.check_password ? true : false;\n    }\n  }\n};","map":{"version":3,"names":["common","name","components","data","role_options","text","value","form","first_name","last_name","role","email","password","retype_password","show","methods","onSubmit","event","preventDefault","alert","$log","info","btoa","fetch","AUTH_API_REGISTER","method","headers","body","JSON","stringify","then","response","json","category","flashMessage","success","message","$router","push","error","catch","onReset","$nextTick","computed","check_name","length","check_password","valid_char_array","Array","from","password_array","i","includes","check_retype_password"],"sources":["src/views/RegisterView.vue"],"sourcesContent":["<template>\r\n  <div class=\"register-form\">\r\n    <div style=\"margin: 3%; padding: 3%; width: 50%\">\r\n      <h3 style=\"text-align: left\">Register</h3>\r\n      <br />\r\n      <b-form @submit=\"onSubmit\" @reset=\"onReset\" v-if=\"show\">\r\n        <b-form-group\r\n          ><b-form-input\r\n            id=\"input-first-name-register\"\r\n            v-model=\"form.first_name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter first name\"\r\n            :state=\"check_name\"\r\n            aria-describedby=\"input-live-feedback-first-name\"\r\n            required\r\n          ></b-form-input>\r\n          <b-form-invalid-feedback id=\"input-live-feedback-first-name\">\r\n            Enter at least 3 letters of first name\r\n          </b-form-invalid-feedback>\r\n        </b-form-group>\r\n\r\n        <b-form-group\r\n          ><b-form-input\r\n            id=\"input-last-name-register\"\r\n            v-model=\"form.last_name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter last name (Optional)\"\r\n          ></b-form-input\r\n        ></b-form-group>\r\n\r\n        <b-form-group label=\"Select role:\" v-slot=\"{ ariaDescribedby }\">\r\n          <b-form-radio-group\r\n            id=\"radio-group-role-register\"\r\n            v-model=\"form.role\"\r\n            :options=\"role_options\"\r\n            :aria-describedby=\"ariaDescribedby\"\r\n            name=\"radio-group-role\"\r\n          ></b-form-radio-group>\r\n        </b-form-group>\r\n\r\n        <b-form-group\r\n          ><b-form-input\r\n            id=\"input-email-register\"\r\n            v-model=\"form.email\"\r\n            type=\"email\"\r\n            placeholder=\"Enter email\"\r\n            required\r\n          ></b-form-input\r\n        ></b-form-group>\r\n\r\n        <b-form-group\r\n          ><b-form-input\r\n            id=\"input-password-register\"\r\n            v-model=\"form.password\"\r\n            placeholder=\"Enter password\"\r\n            type=\"password\"\r\n            :state=\"check_password\"\r\n            aria-describedby=\"input-live-feedback-password\"\r\n            required\r\n          ></b-form-input>\r\n          <b-form-invalid-feedback id=\"input-live-feedback-password\">\r\n            Password should contain letters A-Z a-z and numbers 0-9 only and should be atleast 4 and\r\n            atmost 8 characters long.\r\n          </b-form-invalid-feedback>\r\n        </b-form-group>\r\n\r\n        <b-form-group\r\n          ><b-form-input\r\n            id=\"input-retype-password-register\"\r\n            v-model=\"form.retype_password\"\r\n            placeholder=\"Retype password\"\r\n            type=\"password\"\r\n            :state=\"check_retype_password\"\r\n            aria-describedby=\"input-live-feedback-retype-password\"\r\n            required\r\n          ></b-form-input>\r\n          <b-form-invalid-feedback id=\"input-live-feedback-retype-password\">\r\n            Password did not match.\r\n          </b-form-invalid-feedback>\r\n        </b-form-group>\r\n        <br />\r\n        <b-button style=\"margin: 10px\" type=\"submit\" variant=\"primary\">Submit</b-button>\r\n        <b-button style=\"margin: 10px\" type=\"reset\" variant=\"danger\">Reset</b-button>\r\n      </b-form>\r\n      <br />\r\n      <p>Already registered? Please <b-link href=\"/login\">Login here</b-link></p>\r\n      <p>Go to <b-link href=\"/home\">Home Page</b-link></p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as common from \"../assets/common.js\";\r\n\r\nexport default {\r\n  name: \"RegisterView\",\r\n  components: {},\r\n  data() {\r\n    return {\r\n      role_options: [\r\n        { text: \"Student\", value: \"student\" },\r\n        { text: \"Support\", value: \"support\" },\r\n        { text: \"Admin\", value: \"admin\" },\r\n      ],\r\n      form: {\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        role: \"student\",\r\n        email: \"\",\r\n        password: \"\",\r\n        retype_password: \"\",\r\n      },\r\n      show: true,\r\n    };\r\n  },\r\n  methods: {\r\n    onSubmit(event) {\r\n      event.preventDefault();\r\n      alert('You are creating a new account. Click \"Ok\" to proceed?');\r\n      this.$log.info(\"Submitting Registration form\");\r\n\r\n      this.form.password = btoa(this.form.password);\r\n      this.form.retype_password = btoa(this.form.retype_password);\r\n\r\n      fetch(common.AUTH_API_REGISTER, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(this.form),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.category == \"success\") {\r\n            this.flashMessage.success({\r\n              message: data.message,\r\n            });\r\n            this.$router.push(\"/login\");\r\n          }\r\n          if (data.category == \"error\") {\r\n            this.flashMessage.error({\r\n              message: data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          this.$log.error(`Error : ${error}`);\r\n          this.flashMessage.error({\r\n            message: \"Internal Server Error\",\r\n          });\r\n        });\r\n    },\r\n    onReset(event) {\r\n      event.preventDefault();\r\n      this.form.first_name = \"\";\r\n      this.form.last_name = \"\";\r\n      this.form.email = \"\";\r\n      this.form.password = \"\";\r\n      this.form.retype_password = \"\";\r\n      // Trick to reset/clear native browser form validation state\r\n      this.show = false;\r\n      this.$nextTick(() => {\r\n        this.show = true;\r\n      });\r\n    },\r\n  },\r\n  computed: {\r\n    check_name() {\r\n      return this.form.first_name.length > 2 ? true : false;\r\n    },\r\n    check_password() {\r\n      let password = this.form.password;\r\n      if (password.length < 4 || password.length > 9) {\r\n        return false;\r\n      }\r\n      const valid_char_array = Array.from(\r\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\r\n      );\r\n      const password_array = Array.from(password);\r\n      for (let i = 0; i < password_array.length; i++) {\r\n        if (!valid_char_array.includes(password_array[i])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n    check_retype_password() {\r\n      return this.form.password === this.form.retype_password && this.check_password ? true : false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;AA4FA,YAAAA,MAAA;AAEA;EACAC,IAAA;EACAC,UAAA;EACAC,KAAA;IACA;MACAC,YAAA,GACA;QAAAC,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,EACA;MACAC,IAAA;QACAC,UAAA;QACAC,SAAA;QACAC,IAAA;QACAC,KAAA;QACAC,QAAA;QACAC,eAAA;MACA;MACAC,IAAA;IACA;EACA;EACAC,OAAA;IACAC,SAAAC,KAAA;MACAA,KAAA,CAAAC,cAAA;MACAC,KAAA;MACA,KAAAC,IAAA,CAAAC,IAAA;MAEA,KAAAd,IAAA,CAAAK,QAAA,GAAAU,IAAA,MAAAf,IAAA,CAAAK,QAAA;MACA,KAAAL,IAAA,CAAAM,eAAA,GAAAS,IAAA,MAAAf,IAAA,CAAAM,eAAA;MAEAU,KAAA,CAAAvB,MAAA,CAAAwB,iBAAA;QACAC,MAAA;QACAC,OAAA;UACA;QACA;QACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA,MAAAtB,IAAA;MACA,GACAuB,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAA3B,IAAA;QACA,IAAAA,IAAA,CAAA8B,QAAA;UACA,KAAAC,YAAA,CAAAC,OAAA;YACAC,OAAA,EAAAjC,IAAA,CAAAiC;UACA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA;QACA,IAAAnC,IAAA,CAAA8B,QAAA;UACA,KAAAC,YAAA,CAAAK,KAAA;YACAH,OAAA,EAAAjC,IAAA,CAAAiC;UACA;QACA;MACA,GACAI,KAAA,CAAAD,KAAA;QACA,KAAAnB,IAAA,CAAAmB,KAAA,YAAAA,KAAA;QACA,KAAAL,YAAA,CAAAK,KAAA;UACAH,OAAA;QACA;MACA;IACA;IACAK,QAAAxB,KAAA;MACAA,KAAA,CAAAC,cAAA;MACA,KAAAX,IAAA,CAAAC,UAAA;MACA,KAAAD,IAAA,CAAAE,SAAA;MACA,KAAAF,IAAA,CAAAI,KAAA;MACA,KAAAJ,IAAA,CAAAK,QAAA;MACA,KAAAL,IAAA,CAAAM,eAAA;MACA;MACA,KAAAC,IAAA;MACA,KAAA4B,SAAA;QACA,KAAA5B,IAAA;MACA;IACA;EACA;EACA6B,QAAA;IACAC,WAAA;MACA,YAAArC,IAAA,CAAAC,UAAA,CAAAqC,MAAA;IACA;IACAC,eAAA;MACA,IAAAlC,QAAA,QAAAL,IAAA,CAAAK,QAAA;MACA,IAAAA,QAAA,CAAAiC,MAAA,QAAAjC,QAAA,CAAAiC,MAAA;QACA;MACA;MACA,MAAAE,gBAAA,GAAAC,KAAA,CAAAC,IAAA,CACA,iEACA;MACA,MAAAC,cAAA,GAAAF,KAAA,CAAAC,IAAA,CAAArC,QAAA;MACA,SAAAuC,CAAA,MAAAA,CAAA,GAAAD,cAAA,CAAAL,MAAA,EAAAM,CAAA;QACA,KAAAJ,gBAAA,CAAAK,QAAA,CAAAF,cAAA,CAAAC,CAAA;UACA;QACA;MACA;MACA;IACA;IACAE,sBAAA;MACA,YAAA9C,IAAA,CAAAK,QAAA,UAAAL,IAAA,CAAAM,eAAA,SAAAiC,cAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}